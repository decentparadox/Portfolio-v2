import GithubProvider, { GithubProfile } from "next-auth/providers/github"
import GoogleProvider, { GoogleProfile } from "next-auth/providers/google";
import { PrismaAdapter } from "@next-auth/prisma-adapter"
import NextAuth, { AuthOptions, DefaultSession } from "next-auth"
import { PrismaClient } from "@prisma/client";
import { getServerSession } from "next-auth/next"
  
import type {
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
} from "next"
import { getProviders, signIn } from "next-auth/react"
const prisma = new PrismaClient();

declare module "next-auth" {
  interface Session extends DefaultSession {
    user?: {
      id: string;
      isAdmin: boolean;
      phone: string;
      linkedin: string;
      company: string;
    } & DefaultSession["user"]
  }

  interface User {
    isAdmin: boolean;
    phone: string;
    linkedin: string;
    company: string;
  }
}

export const authOptions: AuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_ID!,
      clientSecret: process.env.GITHUB_SECRET!,
      profile(profile: GithubProfile): any {
        return {
          id: profile.id,
          name: profile.name,
          email: profile.email,
          image: profile.avatar_url,
          phone: "",
          linkedin: "",
          company:""
        };
      }
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_ID!,
      clientSecret: process.env.GOOGLE_SECRET!,
      profile(profile: GoogleProfile ):any{
        return {
          id: profile.sub,
          name: profile.name,
          email: profile.email,
          image: profile.picture,
          phone: "",
          linkedin: "",
          company:""
        }
      }
    })
  ],

  theme: {
    colorScheme: "auto", // "auto" | "dark" | "light"
    brandColor: "#D6E9FF", // Hex color code
    logo: "https://bi0smeetup.in/logo.svg", // Absolute URL to image
    buttonText: "#1d1d1d" // Hex color code
  },
  secret: process.env.NEXTAUTH_SECRET,
  callbacks: {
    session: ({ session, user }) => ({
      ...session,
      user: {
        ...session.user,
        id: user.id,
        isAdmin: user.isAdmin,
        phone: "",
        linkedin: "",
        company:""
      },
    }),
  },
  pages: {
    newUser: '/auth/onboarding'
  },
};